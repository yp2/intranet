Poniższy rozdział omawia implementację aplikacji służącej jako intranet dla firmy z sektora IT, opisane zostaną założenia oraz --wymagania stawanie dla strony serwerowej oraz dla klientów--. W rozdziale poruszone zostaną najistotniejsze oraz kluczowe elementy aplikacji. Aplikacja została napisana z wykorzystaniem frameworka Meteor.js. Część serwera jak i kliencka została za programowana z użyciem JavaScriptu. Warstwa prezentacji została napisana z użyciem HTML5, CSS3/less, Bootstrap oraz AdminLTE. Bazę danych dla aplikacji stanowi nierelacyjna baza danych MongoDB wraz z jej kliencką implementacją Minimongo.

\section{Założenia}

założenia aplikacji intranet

\section{Wymagania}
tu zobaczym czy to będzie opis ogólnie dlaczego został wybarny meteor a nie inne rozwiązanie - można wspomnieć o szybkości kodowania oraz że tematyka nie stoi w sprzeczości z frameworkiem oraz samym mongo 

\section{Users stories/ przypadki użycia}

\section{Struktura aplikacji}
  nie zapomnieć o katalogu .meteor

\section{Serwer}
  \subsection{Baza}
  \subsection{Kolekcje}
  \subsubsection{Dostęp}
   allow/deny
   \subsubsection{Metody}
   \subsubsection{Publikacje}
% \subsection{Publikacje}
  \subsection{Migracje danych}
  \subsection{Konfiguracja}

\section{Cześć wspólna dla serwera oraz klienta}
  \subsection{Metody}
  \subsection{Kolekcje} 
    definicja kolekcji, plus opis collection hooks 


\section{Klient}
  \subsection{Routing}
  \subsection{Subskrypcje}
  \subsection{Szablony}
  \subsection{Eventy}
  \subsection{Helpery}
  
\section{Objekt MyApp}
  po co go się stosuje

  
\section{Paczki powtstałe na potrzeby aplikacji}
yp2:admin-lte@2.3.1
yp2:confirm-modal-bs3@1.1.1
yp2:hijack-email@1.0.0
yp2:yfform@0.3.10
plus informacje że są one dostępne na Atmosfer i githubie