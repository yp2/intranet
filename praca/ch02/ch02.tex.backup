Rozdział ten przedstawia wykorzystane technologie oraz języki programowania użyte podczas projektowania oraz programowania aplikacji Intranet. Aplikacja powstała z wykorzystaniem \emph{JavaScript}, framework aplikacji sieciowych \emph{Meteor.js}, nierelacyjnej bazy danych  \emph{MongoDB} oraz framework'a CSS \emph{Bootstrap}, \emph{HTML5}, \emph{CSS3}, \emph{less} --- dynamiczny jeżyk arkuszy stylów oraz gotowy szablon dla panelu administracyjnego \emph{AdminLTE} wykorzystujący Bootstrap.

\section{JavaScript}

Język programowania JavaScript został użyty do zaprogramowania zarówno części serwerowej (\textit{back-end}) jaki i części odpowiedzialnej za interakcje z użytkownikiem (\textit{front-end}) --- interfejs użytkownika. Obecne strony WWW a w szczególności aplikacje dostępne przez przeglądarkę (Gmail, Google Docs, Google Maps, Facebook) szeroko korzystają z~JavaScript w celu dostarczenie wielofunkcyjnego oraz interaktywnego interfejsu użytkownika. Jednym z powodów wykorzystanie JavaScript była możliwości wykorzystania go po stornie serwera oraz klienta. Najpopularniejszy obecnie sposób tworzenia stron/aplikacji internetowych wyróżnia trzy warstwy --- warstwę struktury (HTML), warstwę prezentacji (CSS) oraz warstwę zachowania (JavaScript)\cite{stefanov10}.

Internet powstał jako zbiór statycznych dokumentów HTML, które były powiązane hiperłączami. Po wzroście popularności oraz rozmiaru sieci, autorom stron przestały wystarczać dostępne narzędzia. Widoczna stała się potrzeba poprawienia interakcji z~użytkownikiem. U jej podstaw leżała chęć zmniejszenie ilości połączeń z serwerem w celu realizowania prostych zadań takich jak walidacja formularzy. W tym czasie pojawiły się dwie możliwości - aplety Javy oraz język \emph{LiveScript}, który został zaproponowany przez firmę Netscape w roku 1995. Został on dołączony do przeglądarki Netscape 2.0 pod nazwą JavaScript\cite{stefanov10}.  

Możliwość zmieniania statycznych elementów stron internetowych została bardzo szybko przyjęta przez rynek. Producenci przeglądarek internetowych szybko dostosowani swoje produktu do obsługi JavaScript'u. Microsoft wyposażył w taką obsługę swoją przeglądarkę Internet Explorer (IE) od wersji 3.0. Jednak była to kopia języka JavaScript --- \emph{JScript}, wzbogacona o kilka funkcjonalności przeznaczonych tylko dla IE. W wyniku coraz większych różnić pomiędzy przeglądarkami podjęto próbę standaryzacji różnych implementacji języka. Próbę tą podjęło Europejskie Stowarzyszenie na rzecz Systemów Informatycznych i Komunikacyjnych (ECMA). Została stworzona specyfikacja ECMAScript. Obecnie obowiązuje standard ECMA-262\cite{ecmascriptWiki} --- JavaScript jest jego najpopularniejszą implementacja.  

Wzrost popularności JavaScriptu miał miejsce w czasie Pierwszej Wojny Przeglądarek (1996-2001)\cite{stefanov10}. Było to także okres tak zwanej bańki internetowej. W tym czasie o udział w rynku walczyli dwaj główni producenci przeglądarek Netscape oraz Microsoft. Firmy te kusiły klientów za pomocą coraz to nowych dodatków i ozdóbek wprowadzanych do przeglądarek oraz do stosowanych w nich wersji JavaScriptu. W tym czasie wiele osób wyrobiło sobie negatywną opinie na temat tego języka, który w wyniku wspomnianych działań oraz braku standaryzacji bez przerwy ulegał modyfikacją. Pisanie programów było koszmarem. Skrypty napisane w oparciu o jedną przeglądarkę nie chciały nie chciały działać w drugiej. Producenci przeglądarek, skupieni na rozszerzaniu o nowe funkcjonalności, nie dostarczali odpowiednich narzędzi do rozwijania aplikacji\cite{stefanov10}.

Niespójności pomiędzy przeglądarkami była tylko częścią problemu. Drugą częścią byli sami autorzy stron, którzy upychali w witrynach zbyt wiele zbędnych funkcjonalności. Bardzo często korzystali z wszystkich nowych możliwości dostarczanych przez przeglądarkę, przez co strony były `upiększane` o kwiatki takie jak animacje na pasku stanu, jaskrawe kolory, migające napisy, trzęsące się okna przeglądarek, płatki śniegu, obiekty podążające za kursorem itp., co często bardzo często utrudniało korzystanie ze stron. Tego typu nadużycia są także powodem złej reputacji JavaScriptu. Problemy te doprowadziły do traktowania języka JavaScript za niewiele więcej niż zabawkę przeznaczoną dla projektantów interfejsów. 

% Sprzeciw wobec JavaScriptu doprowadził do sytuacji, w której w niektórych projektach sieciowych zabronione zostało jakiekolwiek programowanie po stronie klienta. Wszystkie funkcjonalności miał obsługiwać przewidywalny i wiarygodny serwer.

Po zakończeniu Pierwszej Wojny Przeglądarek sposób wytwarzania aplikacji sieciowych uległ zmianie. Zmiany --- na lepsze --- zostały zapoczątkowane przez kilka procesów: 
\begin{itemize}
 \item Microsoft wygrał wojnę i na okres około pięciu lata wstrzymał się od dodawania nowych funkcjonalności do przeglądarki Internet Explorer oraz do samego JavaScriptu. Dzięki temu producenci innych przeglądarek zyskali czas na dogonienie a czasem nawet przewyższenie możliwości IE.
 \item Ruch na rzecz standardów sieciowych zyskał przychylność programistów jaki i producentów przeglądarek. Standardy chronią programistów od konieczności programowania funkcjonalności dwa (lub więcej) razy na wypadek, gdyby coś nie działało, w którejś z przeglądarek. Co prawda nadal nie istnieje środowisko, które spełniało by wszystkie możliwe standardy.
 \item technologie i sposoby programowania osiągnęły bardzo dojrzały poziom, na którym można już zajmować się zagadnieniami takim jak użyteczność, dostępność czy też progresywne ulepszanie. 
\end{itemize}
Dzięki nowym, zdrowszym metodologiom programiści zaczęli uczyć się lepszych sposób 
